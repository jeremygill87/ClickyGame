{"version":3,"sources":["components/Gameboard/Gameboard.js","components/Wrapper/Wrapper.js","components/Navbar/Navbar.js","components/Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["Gameboard","props","className","onClick","selectDick","name","alt","src","image","Wrapper","children","Navbar","message","currentScore","highScore","Title","App","state","dicks","unselectedDicks","shuffleCards","array","i","length","random","Math","floor","undefined","find","item","setState","newDick","filter","this","map","dick","id","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"gutLAWeA,G,MARG,SAAAC,GAAK,OACnB,yBAAKC,UAAY,iBACb,uBAAGC,QAAW,kBAAMF,EAAMG,WAAWH,EAAMI,QACvC,yBAAKH,UAAU,WAAWI,IAAKL,EAAMI,KAAME,IAAKN,EAAMO,YCDnDC,G,MAFC,SAAAR,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAMS,YCe1CC,G,MAfA,SAAAV,GAAK,OAChB,yBAAKC,UAAU,UACX,yBAAKA,UAAU,UACX,8CAEJ,yBAAKA,UAAU,cACVD,EAAMW,SAEX,yBAAKV,UAAU,UAAf,UACW,0BAAMA,UAAU,SAASD,EAAMY,cAD1C,mBAEoB,0BAAMX,UAAU,aAAaD,EAAMa,eCJ5CC,G,MANL,SAAAd,GAAK,OACf,yBAAKC,UAAU,aACX,+DACA,qG,OCqEOc,G,iNAlEbC,MAAQ,CACNL,QAAS,wBACTE,UAAW,EACXD,aAAc,EACdK,MAAOA,EACPC,gBAAiBD,G,EAGnBE,aAAe,SAAAC,GACb,IAAK,IAAIC,EAAID,EAAME,OAAQ,EAAGD,EAAI,EAAGA,IAAK,CACxC,IAAIE,EAASC,KAAKC,MAAMD,KAAKD,UAAaF,EAAI,IADN,EAEZ,CAACD,EAAMG,GAASH,EAAMC,IAAjDD,EAAMC,GAFiC,KAE7BD,EAAMG,GAFuB,O,EAM5CpB,WAAa,SAAAC,GAGX,QAAiBsB,IAFA,EAAKV,MAAME,gBAAgBS,MAAK,SAAAC,GAAI,OAAIA,EAAKxB,OAASA,KAGrE,EAAKyB,SAAS,CACZlB,QAAS,uDACTE,UAAY,EAAKG,MAAMJ,aAAe,EAAKI,MAAMH,UAAa,EAAKG,MAAMJ,aAAc,EAAKI,MAAMH,UAClGD,aAAc,EACdK,MAAOA,EACPC,gBAAiBD,QAEd,CACL,IAAMa,EAAU,EAAKd,MAAME,gBAAgBa,QAAO,SAAAH,GAAI,OAAIA,EAAKxB,OAASA,KAExE,EAAKyB,SAAS,CACZlB,QAAS,mBACTC,aAAc,EAAKI,MAAMJ,aAAe,EACxCK,MAAOA,EACPC,gBAAiBY,IAGrB,EAAKX,aAAaF,I,wEAGV,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACAN,QAAWqB,KAAKhB,MAAML,QACtBC,aAAgBoB,KAAKhB,MAAMJ,aAC3BC,UAAamB,KAAKhB,MAAMH,YAExB,kBAAC,EAAD,MACA,yBAAKZ,UAAU,gBACZ+B,KAAKhB,MAAMC,MAAMgB,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CACA9B,KAAM8B,EAAK9B,KACX+B,GAAID,EAAKC,GACTC,IAAKF,EAAKC,GACV5B,MAAO2B,EAAK3B,MACZJ,WAAY,EAAKA,WACjBS,aAAc,EAAKI,MAAMJ,aACzBC,UAAW,EAAKG,MAAMH,qB,GA1DhBwB,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM5C,c","file":"static/js/main.ccd756ee.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Gameboard.css\";\r\n\r\nconst Gameboard = props => (\r\n    <div className = \"img-container\">\r\n        <a onClick = {() => props.selectDick(props.name)}>\r\n            <img className=\"gamecard\" alt={props.name} src={props.image} />\r\n        </a> \r\n    </div>\r\n);\r\n\r\nexport default Gameboard;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"Wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nconst Navbar = props => (\r\n    <nav className=\"navbar\">\r\n        <div className=\"col-sm\">\r\n            <h1>Click-A-DIck!</h1>\r\n        </div>\r\n        <div className=\"scoreTable\">\r\n            {props.message}\r\n        </div>\r\n        <div className=\"col-sm\">\r\n            Score: <span className=\"score\">{props.currentScore}</span>\r\n            |*| High Score: <span className=\"highScore\">{props.highScore}</span>\r\n        </div>\r\n    </nav>\r\n)\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./Title.css\";\r\n\r\nconst Title = props =>\r\n    <div className=\"jumbotron\">\r\n        <h1>Click-a-Dick Clicky Dicky Game!</h1>\r\n        <h4>Click a dick below to earn points, but don't double dip your dicks</h4>\r\n    </div>\r\n\r\n    export default Title;","import React from 'react';\nimport Gameboard from \"./components/Gameboard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport Title from \"./components/Title\";\nimport dicks from \"./dicks.json\";\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    message: \"Click a Dick to start\",\n    highScore: 0,\n    currentScore: 0,\n    dicks: dicks,\n    unselectedDicks: dicks\n  };\n\n  shuffleCards = array => {\n    for (let i = array.length -1; i > 0; i--) {\n      let random = Math.floor(Math.random() * ( i + 1));\n      [array[i], array[random]] = [array[random], array[i]];\n    };\n  };\n\n  selectDick = name => {\n    const findDick = this.state.unselectedDicks.find(item => item.name === name);\n\n    if (findDick === undefined) {\n      this.setState({\n        message: \"Wrong!  You need to bone up on your dick recognition\",\n        highScore: (this.state.currentScore > this.state.highScore) ? this.state.currentScore: this.state.highScore,\n        currentScore: 0,\n        dicks: dicks,\n        unselectedDicks: dicks\n      });\n    } else {\n      const newDick = this.state.unselectedDicks.filter(item => item.name !== name);\n\n      this.setState({\n        message: \"Ugh, what a dick\",\n        currentScore: this.state.currentScore + 1,\n        dicks: dicks,\n        unselectedDicks: newDick\n      });\n    }\n    this.shuffleCards(dicks);\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n        message = {this.state.message}\n        currentScore = {this.state.currentScore}\n        highScore = {this.state.highScore}\n        />\n        <Title/>\n        <div className=\"containerDiv\">\n          {this.state.dicks.map(dick => (\n            <Gameboard\n            name={dick.name}\n            id={dick.id}\n            key={dick.id}\n            image={dick.image}\n            selectDick={this.selectDick}\n            currentScore={this.state.currentScore}\n            highScore={this.state.highScore}\n            />\n          ))}\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}